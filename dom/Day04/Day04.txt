1、渐变
	属性：background-image
	取值：
		1、linear-gradient(angle,color-point,color-point);
			angle : 
				1、关键字 (角度)
					to top (0deg)
					to right (90deg) 
					to bottom (180deg)
					to left (270deg)
		2、radial-gradient(size at position,color-point);
		3、repeating-linear-gradient();
		4、repeating-radial-gradient();
	浏览器兼容性:
		通过浏览器前缀实现兼容
		Firefox : -moz-
		Chrome & Safari : -webkit-
		Opera : -o-
		
		ex:
			background-image:linear-gradient();
			background-image:-moz-linear-gradient();
			background-image:-webkit-linear-gradient();
			background-image:-o-linear-gradient();
2、文本格式化
	1、字体
		font-family,font-size,font-style,font-variant,font-weight

		font:style variant weight size family;
	2、文本 
		color,text-align,text-decoration,text-indent,text-shadow,line-height
3、表格
	1、常用属性
		vertical-align : top / middle / bottom
	2、特有属性
		border-collapse
		border-spacing
		caption-side
		table-layout
4、定位 - 浮动定位
	float : none / left / right
	特殊效果：
		1、显示不下时，最后一个换行，可能会被卡住
		2、元素浮动后，宽度将由内容来决定
		3、元素浮动后，元素将变为块级元素
		4、文本，图片，行内元素，行内块，是采用环绕的方式排列的，是不能被浮动元素压在底下的

*************************************************
1、浮动 
	1、清除浮动所带来的影响
		元素一旦浮动起来之后就会对后续的元素带来一定的位置影响，如果后续元素不想被影响的话，就可以通过 清除浮动所带来的影响 来解决位置问题
		属性：clear
		取值：
			1、none
				默认值，即不做任何清除操作
			2、left
				清除当前元素 前面的元素 左浮动带来的影响
			3、right
				清除当前元素 前面的元素 右浮动带来的影响
			4、both
				清除当前元素 前面的元素 任意浮动带来的影响
	2、浮动元素为父元素带来的影响
		由于浮动元素会脱离文档流，所以是不占据页面空间的，那么就会对父元素的高度带来一定的影响。
			1、创建一个div，id="container"，并设置边框1px solid #000
			2、在 container中，创建3个子元素(div,200*200),逐个浮动，并且观察结果
		解决父元素高度的影响的方案：
			1、直接设置父元素高度
				弊端：必须要知道父元素的高度
			2、设置父元素也浮动
				弊端：不是任何时候父元素都需要浮动，并且会对后续元素带来位置的影响
			3、为父元素设置 overflow
				取值为 : hidden 或 auto
				弊端：如果有需要溢出显示的东西，也一同被隐藏了
			4、在父元素中，追加一个空的块级子元素,并设置其 clear:both
			5、... ...
2、显示方式
	决定了元素是 "行内元素"还是"块级元素"还是"行内块元素" ... ...
	属性：display
	取值：
		1、none
			不显示元素
			元素会脱离文档流
		2、block
			按 块级元素 的方式显示元素
			显示，独占一行，允许修改尺寸 以及 外边距
		3、inline
			按 行内元素 的方式显示元素
			显示，多个元素在一行，不允许修改尺寸 以及 垂直外边距
		4、inline-block
			按 行内块元素 的方式显示元素
			显示，多个元素在一行，允许修改尺寸
		5、table
			按 表格 的方式显示元素
			显示，独占一行，允许修改尺寸
	练习：(5分钟)
		1、在页面中创建 5个 a标记，并且设置样式，宽度100px，高度 100px，边框 1px solid #000;
		2、将 第2个 a 变成块级元素，观察结果
		3、将 第3个 a 变成行内元素，观察结果
		4、将 第4个 a 设置为 display:none,观察结果
		5、将 第5个 a 变成行内块元素，观察结果
3、显示效果
	1、visibility 属性
		作用：指定元素的可见性
		取值：
			1、visible,默认值，元素可见
			2、hidden，隐藏，依然占据页面空间
			3、collapse,用在表格元素，删除一行或一列时不影响表格整体布局
		练习：(3分钟)
			页面中创建三个 div 元素 (200*200)
			将中间的元素 设置为  visibility:hidden 
			将中间的元素 改为 display:none
		面试：
			visibility:hidden 与 display:none 的区别
				display:会脱离文档流，所以不占页面空间
				visibility:并未脱离文档流，所以还占空间
	2、opacity 属性
		作用：透明度
		取值：0.0(完全透明) ~ 1.0(完全不透明,即显示)
		练习：模拟 学子商城 Banner 两边的方向按钮
			1、创建一个 a 标记，设置其尺寸为 35px*70px，边框倒角 5px,背景纯黑色(#000),透明度为 0.15
			2、鼠标悬停时，将透明度更改为 0.3
	3、vertical-align 属性
		1、应用在 表格 中
			控制表格中的数据的垂直对齐方式
			取值：top / middle / bottom
		2、应用在 图片 和 行内块元素上
			控制 图片 或 行内块 元素 两边的文本 相对于 他们的 对齐方式
			取值：
				1、top
				2、middle
				3、bottom
				4、baseline - 基线对齐
					1、行内块 
						是在最后一行文本的底部
					2、图片
						图片底部向下3px位置处
						在项目中 
						img{
							vertical-align:bottom;
						}
	4、cursor 属性
		鼠标悬停在元素上时，鼠标的显示效果
		取值：
			1、default
			2、pointer ：小手
			3、crosshair ：+
			4、text ：I
			5、wait ：等待
			6、help ：帮助
		创建一个 div 元素，写点文本
		设置 cursor 属性 并观察结果
4、列表属性
	1、列表项标志
		属性：list-style-type
		取值：
			1、none ：不显示标志
	2、列表项图像
		属性：list-style-image
		取值：url(图像路径);
	3、列表项位置
		1、创建一个列表(有序/无序),编写2-3个列表项,为 li 添加边框，观察 列表项标志 和 li 之间的位置
		2、将 列表(ul/ol)的内边距改为0， 再观察效果

		属性：list-style-position
		取值：
			1、outside
				默认值，将标志放置于 li 的外边，列表的 padding 区域内

			2、inside
				将标志放置于 li的 里边，属于li内容区域的一部分

	4、列表属性
		属性：list-style
		取值：type url() position;
		常用方式：
			list-style:none;
5、定位属性
	1、定位属性
		1、定位方式属性
			属性：position
			取值：static / relative / absolute / fixed
			注意：如果将元素的定位方式指定为 relative / absolute / fixed 任何一种的话，那么该元素则被称为"已定位元素"
		2、偏移属性
			作用：为了修改 "已定位元素" 的位置
			属性：
				1、top ：以元素上边为基准边，改变元素的偏移距离
				2、right ：以元素的右边为基准边，改变元素的偏移距离
				3、bottom
				4、left
		3、堆叠顺序
			作用：修改 "已定位元素"们之间的堆叠效果
			属性：z-index
			取值：无单位的数字
	2、定位方式 - 相对定位(relative)
		1、什么是相对定位
			元素会相对于它自己原来的位置，偏移某个距离
			相对定位的元素，偏移完成之后，原来的位置还会被保留，不会被其它元素占据
		2、语法
			属性：position
			取值：relative
			配合着 偏移属性 实现位置的改变
			
			练习：(5分钟)
				1、在页面中创建一个ul，四个 li，横向排列(float)，设置尺寸为 100*30，增加边框以及 左右外边距
				2、当鼠标悬停在 li 上面时，让 li 向左上角 偏移 5px 的位置(使用相对定位的方式实现)
		3、使用场合
			1、元素的位置微调
	3、定位方式 - 绝对定位(absolute)
		1、什么是绝对定位 & 绝对定位特点
			1、绝对定位元素会脱离文档流 - 不占据页面空间
			2、绝对定位的元素会相对于离它最近的，已定位的祖先元素来实现位置的初始化
				<div id="d1">
					<div id="d2">
						<div id="d3">
							<span>这是个span</span>
						</div>
					</div>
				</div>
			3、如果元素没有已定位的祖先元素的话，那么它的位置就相对于 body 去实现初始化
		2、语法
			 属性：position
			 取值：absolute
			 配合着 偏移属性 实现位置的改变
		3、小窍门
			一般情况，绝对定位的元素一定会有一个已定位的祖先元素，多数都是由直接父元素来充当这个角色
		4、绝对定位对元素的影响
			1、脱离文档流，允许压在其它元素的上方
			2、绝对定位的元素会变成块级元素
			3、margin可以正常使用，但是margin的左右auto值会失效
			4、绝对定位的元素，将left,right,bottom,top四个值都设置为0的情况下，margin:auto 会让整个元素变的绝对居中




